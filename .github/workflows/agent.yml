name: Validate Instructions With Agent

on:
  issue_comment:
    types:
      - created

jobs:
  run-agent:
    if: >-
      github.event.issue.pull_request != null &&
      startsWith(github.event.comment.body, '/validate')
    runs-on: ubuntu-latest
    permissions:
      models: read
      issues: write
      pull-requests: write
      actions: read
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Python
        uses: actions/setup-python@v5
        with:
          python-version: "3.11"

      - name: Install uv
        run: python -m pip install --upgrade uv

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: "22"

      - name: Sync agent dependencies
        working-directory: agent
        run: uv sync --no-dev

      - name: Install Playwright browsers
        working-directory: agent
        run: uv run playwright install --with-deps --only-shell

      - name: Install Playwright MCP server
        working-directory: agent
        run: npm install @playwright/mcp@latest

      - name: Prepare prompt from comment
        env:
          COMMENT_BODY: ${{ github.event.comment.body }}
        run: |
          python <<'PY'
          import os
          from pathlib import Path

          comment = os.environ.get("COMMENT_BODY", "").strip()
          trigger = "/validate"
          prompt = comment[len(trigger):].strip() if comment.startswith(trigger) else comment

          Path("agent_prompt.txt").write_text(prompt, encoding="utf-8")

          github_env_path = os.environ["GITHUB_ENV"]
          with open(github_env_path, "a", encoding="utf-8") as env_file:
              env_file.write("PROMPT<<EOF\n")
              env_file.write(prompt)
              env_file.write("\nEOF\n")
          PY

      - name: Run agent
        working-directory: agent
        continue-on-error: true
        env:
          PROMPT: ${{ env.PROMPT }}
          LLM_API_KEY: ${{ secrets.LLM_API_KEY }}
          LLM_BASE_URL: ${{ vars.LLM_BASE_URL || 'https://models.github.ai/inference' }}
          LLM_MODEL_NAME: ${{ vars.LLM_MODEL_NAME || 'openai/gpt-4o-mini' }}
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          uv run ai-validator-agent "$PROMPT" 2>&1 | tee ../agent_output.txt || echo "Agent execution failed" >> ../agent_output.txt

      - name: Publish playwright report artifact
        id: upload-artifact
        uses: actions/upload-artifact@v4
        with:
          name: playwright-report
          path: agent/playwright-report/

      - name: Comment PR with agent output
        uses: actions/github-script@v7
        env:
          PROMPT: ${{ env.PROMPT }}
          ARTIFACT_URL: ${{ steps.upload-artifact.outputs.artifact-url }}
        with:
          script: |
            const fs = require('fs');

            // Read the agent output
            let agentOutput = '';
            try {
              agentOutput = fs.readFileSync('agent_output.txt', 'utf8');
            } catch (error) {
              agentOutput = 'No output was captured from the agent execution.';
            }

            // Get the artifact URL from the upload step
            const artifactUrl = process.env.ARTIFACT_URL;
            let artifactLink = `[workflow artifacts](https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }})`;

            if (artifactUrl) {
              artifactLink = `[playwright-report artifact](${artifactUrl})`;
            }

            // Create the comment body
            const commentBody = `## ðŸ¤– AI Validator Agent Results

            **Prompt:** \`${process.env.PROMPT || 'Not available'}\`

            ### Agent Output:
            \`\`\`
            ${agentOutput}
            \`\`\`

            ### ðŸ“¹ Video Report
            A video recording of the validation process has been generated. You can download it from the ${artifactLink}.

            ---
            *This comment was generated automatically by the AI Validator Agent workflow.*`;

            // Post the comment
            await github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: commentBody
            });
